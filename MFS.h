#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#include <stdint.h>
#include <sodium.h>
#include <time.h>


#define MFS_MAGIC "MFS"
#define MAX_LOOKUP_SIZE UINT16_MAX
#define ONE_MEGABYTE 1024*1024
#define MAX_FILE_SIZE ONE_MEGABYTE*64
#define MAX_NAME_SIZE MAX_PATH
#define MAX_DATE_SIZE 128
#define PADDING_SIZE 16
#define DEFAULT_DISK_SIZE 1024*ONE_MEGABYTE
#define MAX_BLOCK_SIZE 4096
#define MAX_NUM_BLOCKS_PER_FILE 4096
#define MAX_STORAGE_BLOCKS MAX_NUM_BLOCKS_PER_FILE*1024

typedef enum _FMODE
{
    RD,
    WR,
    RDWR,
    A
}FMODE;

typedef enum _FTYPE {
	TEXT = 0,
	BINARY,
	ZIP
}FTYPE;

typedef struct _Block
{
    uint32_t chksum;
    BOOL is_free;
    BOOL is_full;
    uint32_t size_occupied;
    uint64_t offset;
}Block;

typedef struct _FileHeader {
    char name[MAX_NAME_SIZE];
    uint32_t owned_blocks[MAX_NUM_BLOCKS_PER_FILE];
    uint32_t block_count;
    FTYPE ftype;
    uint32_t attributes;
    uint64_t size;
    char creation_date[MAX_DATE_SIZE];
    char date_modified[MAX_DATE_SIZE];
}FileHeader;


typedef struct _SuperBlock {
	char magic[4] = "MFS";
    Block blocks[MAX_STORAGE_BLOCKS] = { {0,1,0,0} };
	uint64_t uSuperBlockSize;
	uint64_t uLookup_offset;
    uint64_t uBlock_offset = sizeof(SuperBlock) + (MAX_LOOKUP_SIZE*sizeof(FileHeader));
	uint64_t uVersion[3];
	uint64_t uMax_lookup_size;
	uint64_t uLookup_curr_size;
	uint64_t uMaxFileSize = MAX_FILE_SIZE;
	uint64_t uDiskSize;
	uint8_t  padding[PADDING_SIZE] = { 0 };
}SuperBlock;

#define MAX_PAYLOAD_SIZE 64*1024
#define MAX_META_SIZE 256
#define MAX_FILE_NAME 256
typedef int PID;

typedef enum _CODE
{
    CODE_SUCCESS = 1,
    CODE_GET_ALL = 2,
    CODE_GET_ONE = 4,
    CODE_NO_UPDATE = 8,
    CODE_UPDATE = 16,
    CODE_IGNORE_REQUEST = 32,
    CODE_TERMINATE_ONE = 64,
    CODE_TERMINATE_ALL = 128,
    CODE_GET_SESSION_KEY = 256,
    CODE_MY_PUBLIC_KEY = 512,
    CODE_ERROR = -1,
}CTRLCODE;

//typedef enum _FTYPE
//{
//    TEXT = 0,
//    BINARY = 1,
//    ZIP = 2
//}FTYPE;

typedef struct _METADATA
{
    DWORD FileAttributes;
    char Filename[MAX_FILE_NAME];
    size_t Filesize;
    FTYPE FileType;
}METADATA;

typedef struct _Control {
    CTRLCODE ControlCode;
    CTRLCODE ResponseCode;
    METADATA MetaData;
    BYTE payload[MAX_PAYLOAD_SIZE];
}Control;